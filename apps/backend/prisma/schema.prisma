generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  GUEST
  CUSTOMER
  CREATOR
  ADMIN
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum YogaStyle {
  HATHA
  VINYASA
  YIN
  NIDRA
  KUNDALINI
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL
}

enum BlogCategory {
  PRACTICE
  PHILOSOPHY
  HEALTH
  LIFESTYLE
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  avatar       String?
  role         UserRole @default(CUSTOMER)
  locale       String   @default("ru")
  theme        Theme    @default(LIGHT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([username])
}

model YogaInstructor {
  id             String                          @id @default(uuid())
  name           String
  bio            String
  avatar         String?
  experience     Int
  certifications String[]
  instagram      String?
  telegram       String?
  vk             String?
  createdAt      DateTime                        @default(now())
  updatedAt      DateTime                        @updatedAt
  specializations YogaInstructorSpecialization[]
  classes        YogaClass[]
  blogPosts      BlogPost[]
}

model YogaInstructorSpecialization {
  id           String         @id @default(uuid())
  instructorId String
  style        YogaStyle
  instructor   YogaInstructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@index([instructorId])
}

model YogaClass {
  id                  String          @id @default(uuid())
  title               String
  description         String
  style               YogaStyle
  instructorId        String
  dayOfWeek           DayOfWeek
  startTime           String
  duration            Int
  level               DifficultyLevel
  maxParticipants     Int
  currentParticipants Int             @default(0)
  price               Decimal         @db.Decimal(10, 2)
  image               String?
  isActive            Boolean         @default(true)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  instructor          YogaInstructor  @relation(fields: [instructorId], references: [id])

  @@index([instructorId])
  @@index([dayOfWeek])
}

model Subscription {
  id           String   @id @default(uuid())
  name         String
  description  String
  classesCount Int
  validityDays Int
  price        Decimal  @db.Decimal(10, 2)
  discount     Int?
  features     String[]
  isPopular    Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BlogPost {
  id          String        @id @default(uuid())
  title       String
  slug        String        @unique
  excerpt     String
  content     String
  image       String?
  authorId    String
  category    BlogCategory
  tags        String[]
  readingTime Int
  isPublished Boolean       @default(false)
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      YogaInstructor @relation(fields: [authorId], references: [id])

  @@index([slug])
  @@index([authorId])
  @@index([category])
}